{"/home/travis/build/npmtest/node-npmtest-vantage/test.js":"/* istanbul instrument in package npmtest_vantage */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-vantage/lib.npmtest_vantage.js":"/* istanbul instrument in package npmtest_vantage */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_vantage = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_vantage = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-vantage/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-vantage && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_vantage */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_vantage\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_vantage.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_vantage.rollup.js'] =\n            local.assetsDict['/assets.npmtest_vantage.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_vantage.__dirname + '/lib.npmtest_vantage.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-vantage/node_modules/vantage/lib/index.js":"\r\n\"use strict\";\r\n\r\n/**\r\n * Module dependencies.\r\n */\r\n\r\nvar _ = require(\"lodash\");\r\nvar Vorpal = require('vorpal');\r\nvar VantageServer = require(\"./server\");\r\nvar VantageClient = require(\"./client\");\r\nvar commons = require(\"./vantage-commons\");\r\nvar repl = require(\"vorpal-repl\");\r\n\r\nfunction Vantage() {\r\n\r\n  var self = this;\r\n\r\n  if (!(this instanceof Vantage)) { return new Vantage(); }\r\n\r\n  Vorpal.call(this);\r\n\r\n  // Banner to display on login to a system. If null,\r\n  // doesn't display a banner.\r\n  this._banner = void 0;\r\n\r\n  // Vantage client connects to other instances\r\n  // of Vantage.\r\n  this.client = new VantageClient(this);\r\n\r\n  // Vantage server receives connections from\r\n  // other vantages. Activated by vantage.listen();\r\n  this.server = new VantageServer(this);\r\n\r\n  // If authentication is used, it is called through this fn.\r\n  this._authFn = void 0;\r\n\r\n  this._initIO();\r\n\r\n  return this;\r\n}\r\n\r\nVantage.prototype = Object.create(Vorpal.prototype);\r\n\r\n/**\r\n * Vantage prototype.\r\n */\r\n\r\nvar vantage = Vantage.prototype;\r\n\r\n_.extend(Vantage.prototype, {\r\n\r\n  _initIO: function() {\r\n    this\r\n      .use(commons)\r\n      .use(repl);\r\n  },\r\n\r\n  /**\r\n   * Programatically connect to another server\r\n   * instance running Vantage.\r\n   *\r\n   * @param {Server} server\r\n   * @param {Integer} port\r\n   * @param {Object} options\r\n   * @param {Function} cb\r\n   * @return {Promise}\r\n   * @api public\r\n   */\r\n\r\n  connect: function(server, port, options, cb) {\r\n    return this.client.connect.call(this.client, server, port, options, cb);\r\n  },\r\n\r\n  /**\r\n   * Write a banner on remote login.\r\n   *\r\n   * @param {String} banner\r\n   * @return {Vantage}\r\n   * @api public\r\n   */\r\n\r\n  banner: function(banner) {\r\n    this._banner = banner || void 0;\r\n    return this;\r\n  },\r\n\r\n  /**\r\n   * Imports an authentication middleware\r\n   * module to replace the server's auth\r\n   * function, which is called when a remote\r\n   * instance of vantage connects.\r\n   *\r\n   * @param {Function} middleware\r\n   * @param {Object} options\r\n   * @return {Vantage}\r\n   * @api public\r\n   */\r\n\r\n  auth: function(middleware, options) {\r\n    if (this.server && this.server.auth) {\r\n      this.server.auth(middleware, options);\r\n    } else {\r\n      throw new Error(\"vantage.auth is only available in Vantage.IO. Please use this (npm install vantage-io --save)\");\r\n    }\r\n    return this;\r\n  },\r\n\r\n  /**\r\n   * Calls authentication middleware\r\n   *\r\n   * @param {Object} args\r\n   * @param {Function} cb\r\n   * @api private\r\n   */\r\n\r\n  _authenticate: function(args, cb) {\r\n    var ssn = this.getSessionById(args.sessionId);\r\n    if (!this._authFn) {\r\n      var nodeEnv = process.env.NODE_ENV || \"development\";\r\n      if (nodeEnv !== \"development\") {\r\n        var msg = \"The Node server you are connecting to appears \"\r\n        + \"to be a production server, and yet its Vantage.js \"\r\n        + \"instance does not support any means of authentication. \\n\"\r\n        + \"To connect to this server without authentication, \"\r\n        + \"ensure its 'NODE_ENV' environmental variable is set \"\r\n        + \"to 'development' (it is currently '\" + nodeEnv + \"').\";\r\n        ssn.log(chalk.yellow(msg));\r\n        ssn.authenticating = false;\r\n        ssn.authenticated = false;\r\n        cb(msg, false);\r\n      } else {\r\n        ssn.authenticating = false;\r\n        ssn.authenticated = true;\r\n        cb(void 0, true);\r\n      }\r\n    } else {\r\n      this._authFn.call(ssn, args, function(message, authenticated) {\r\n        ssn.authenticating = false;\r\n        ssn.authenticated = authenticated;\r\n        if (authenticated === true) {\r\n          cb(void 0, true);\r\n        } else {\r\n          cb(message);\r\n        }\r\n      });\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Starts vantage listening as a server.\r\n   *\r\n   * @param {Mixed} app\r\n   * @param {Object} options\r\n   * @return {Vantage}\r\n   * @api public\r\n   */\r\n\r\n  listen: function(app, options, cb) {\r\n    this.server.init(app, options, cb);\r\n    return this;\r\n  }\r\n\r\n\r\n})\r\n\r\n/**\r\n * Expose `Vantage`.\r\n */\r\n\r\nexports = module.exports = Vantage;","/home/travis/build/npmtest/node-npmtest-vantage/node_modules/vantage/lib/server.js":"\"use strict\";\r\n\r\n/**\r\n * Module dependencies.\r\n */\r\n\r\nvar _ = require(\"lodash\")\r\n  , intercept = require(\"./intercept\")\r\n  , Firewall = require(\"./firewall\")\r\n  , stripAnsi = require(\"strip-ansi\")\r\n  , basicAuth = require(\"vantage-auth-basic\")\r\n  ; require(\"native-promise-only\")\r\n  ;\r\n\r\n/**\r\n * Initialize a new `VantageServer` instance.\r\n *\r\n * @param {Vantage} parent\r\n * @return {VantageServer}\r\n * @api public\r\n */\r\n\r\nfunction VantageServer(parent) {\r\n  if (!(this instanceof VantageServer)) { return new VantageServer(); }\r\n  this._hooked = false;\r\n\r\n  // Sessions are created when you use\r\n  // vantage externally to remotely connect\r\n  // to this running instance of vantage.\r\n  // Every connection (a socket.io connection)\r\n  // is stored as a Session object.\r\n  this.sessions = [];\r\n\r\n  this.parent = parent;\r\n  return this;\r\n}\r\n\r\n/**\r\n * VantageServer prototype.\r\n */\r\n\r\nvar vantageServer = VantageServer.prototype;\r\n\r\n/**\r\n * Expose `VantageServer`.\r\n */\r\n\r\nexports = module.exports = VantageServer;\r\n\r\n/**\r\n * Gets vantage started as a server.\r\n *\r\n * @param {App} app\r\n * @param {Object} options\r\n * @return {VantageServer}\r\n * @api public\r\n */\r\n\r\nvantageServer.init = function(app, options, cb) {\r\n  var self = this;\r\n\r\n  // If options is a function, we think it's\r\n  // a callback.\r\n  cb = (_.isFunction(options)) ? options\r\n    : (cb || function(){});\r\n\r\n  // If a port is passed in instead of options,\r\n  // accept that by converting it to a filled object.\r\n  // Otherwise, default to an empty object.\r\n  options = (options && _.isFunction(options)) ? {}\r\n    : (options && !_.isObject(options) && !isNaN(options)) ? ({ port: options })\r\n    : (!options) ? {}\r\n    : options;\r\n\r\n  // If a port was passed as the 'app', assign it\r\n  // as the port instead.\r\n  options.port =\r\n    (app && !_.isObject(app) && !isNaN(app)) ? app : options.port;\r\n\r\n  // If only a port was passed as the app, make the app\r\n  // object a blank function.\r\n  app =\r\n    (app && !_.isObject(app) && !isNaN(app)) ? function(){} : app;\r\n\r\n  var appIs =\r\n    (_.isFunction(app)) ? \"callback\" :\r\n    (_.isObject(app) && _.isFunction(app.callback)) ? \"koa\" :\r\n    (_.isObject(app) && _.isFunction(app.connection)) ? \"hapi\" :\r\n    \"\";\r\n\r\n  options = _.defaults(options, {\r\n    port: 80,\r\n    ssl: false,\r\n    logActivity: false\r\n  });\r\n\r\n\r\n  var appCallback =\r\n    (appIs === \"callback\") ? app :\r\n    (appIs === \"koa\") ? app.callback() :\r\n    (appIs === \"hapi\") ? true :\r\n    void 0;\r\n\r\n  if (!appCallback) {\r\n    throw new Error(\"Unsupported HTTP Server passed into Vantage.\");\r\n  }\r\n\r\n  if (appIs === \"hapi\") {\r\n    this.server = app;\r\n\r\n    // Create a connection if none exist.\r\n    if (this.server.connections.length === 0) {\r\n      this.server.connection({ port: options.port, labels: \"vantage\" });\r\n      this.io = require(\"socket.io\")(this.server.listener);\r\n    } else if (this.server.connections.length > 1) {\r\n      // Select a specific connection if more than one exist.\r\n      this.io = require(\"socket.io\")(this.server.select(options.connectionLabel || \"vantage\").listener);\r\n      delete options.connectionLabel;\r\n    } else {\r\n      this.io = require(\"socket.io\")(this.server.listener);\r\n    }\r\n  } else {\r\n    var type = (options.ssl) ? \"https\" : \"http\";\r\n    if (type === \"http\") {\r\n      this.server = require(type).createServer(appCallback);\r\n    } else {\r\n      this.server = require(type).createServer(options, appCallback);\r\n    }\r\n    this.io = require(\"socket.io\")(this.server);\r\n    this.server.listen(options.port);\r\n  }\r\n\r\n  this._port = options.port;\r\n  this._logActivity = options.logActivity;\r\n\r\n  this.io.set(\"authorization\", function(handshakeData, accept){\r\n\r\n    var address = handshakeData.connection._peername;\r\n    var valid = self.firewall.valid(address);\r\n    var query = handshakeData._query;\r\n    var id = query.id || void 0;\r\n    var ssnId = query.sessionId || void 0;\r\n\r\n    // If Vantage has the same unique ID, don't let\r\n    // it connect to itself.\r\n    if (id && (id === self.parent.session.id)) {\r\n      return accept(\"You can't connect to yourself.\", false);\r\n    }\r\n    if (_.pluck(self.sessions, \"id\").indexOf(ssnId) > -1) {\r\n      return accept(\"You have already connected to this instance.\", false);\r\n    }\r\n\r\n    if (!valid) {\r\n      return accept(\"IP Not Allowed: \" + address, false);\r\n    } else {\r\n      return accept(void 0, true);\r\n    }\r\n\r\n  });\r\n\r\n  this.firewall = new Firewall();\r\n  this.parent.firewall = this.firewall;\r\n\r\n  this.listen(cb);\r\n\r\n  this.hook(function(txt) {\r\n    for (var i = 0; i < self.sessions.length; ++i) {\r\n      if (self.sessions[i].pipe) {\r\n        // Inquirer's prompt cleaning seems to randomly\r\n        // spit ANSI code, causing unwanted extra lines.\r\n        // So if we just get ANSI, ignore.\r\n        if (!(txt && txt.length > 1 && stripAnsi(txt).length === 0)) {\r\n          self.parent._send(\"vantage-stdout-downstream\", \"downstream\", { value: txt, sessionId: self.sessions[i].id });\r\n        }\r\n      }\r\n    }\r\n    return txt;\r\n  });\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Creates server socket connections and\r\n * registers all events.\r\n *\r\n * @return {VantageServer}\r\n * @api private\r\n */\r\n\r\nvantageServer.listen = function(cb) {\r\n  var self = this;\r\n  cb = cb || function(){};\r\n\r\n  this.io.on(\"connection\", function(socket) {\r\n\r\n    var query = socket.handshake.query;\r\n    var ssn = new self.parent.Session({\r\n      local: false,\r\n      parent: self.parent,\r\n      id: query.sessionId,\r\n      authenticating: true,\r\n      authenticated: false,\r\n      host: socket.handshake.headers.host,\r\n      address: socket.handshake.address\r\n    });\r\n\r\n    ssn.server = socket;\r\n    self.sessions.push(ssn);\r\n\r\n    // Listens for an event, authenticating\r\n    // the session first.\r\n    function on(str, opts, cbk) {\r\n      cbk = (_.isFunction(opts)) ? opts : cbk;\r\n      cbk = cbk || function() {};\r\n      opts = opts || {};\r\n      ssn.server.on(str, function() {\r\n        if (!ssn.server || (!ssn.authenticating && !ssn.authenticated)) {\r\n          //console.log(\"Not Authenticated. Closing Session.\", ssn.authenticating, ssn.authenticated);\r\n          self.parent._send(\"vantage-close-downstream\", \"downstream\", { sessionId: ssn.id });\r\n          return;\r\n        }\r\n        cbk.apply(self, arguments);\r\n      });\r\n    }\r\n\r\n    on(\"vantage-keypress-upstream\", function(data) {\r\n      self.parent._proxy(\"vantage-keypress-upstream\", \"upstream\", data).then(function(){\r\n        if (([\"up\", \"down\", \"tab\"].indexOf(data.key) > -1)) {\r\n          var sessn = self.parent.getSessionById(data.sessionId);\r\n          sessn.getKeypressResult(data.key, data.value, function(err, response) {\r\n            self.parent._send(\"vantage-keypress-downstream\", \"downstream\", { value: (err || response), sessionId: sessn.id });\r\n          });\r\n        } else {\r\n          self.parent._histCtr = 0;\r\n        }\r\n      });\r\n    });\r\n\r\n    on(\"vantage-command-upstream\", function(data) {\r\n      self.parent._proxy(\"vantage-command-upstream\", \"upstream\", data).then(function() {\r\n        if (data.command) {\r\n          var response = {\r\n            command: data.command,\r\n            completed: true,\r\n            error: void 0,\r\n            data: arguments,\r\n            sessionId: data.sessionId\r\n          };\r\n          var execute = function() {\r\n            return new Promise(function(resolve, reject){\r\n              var cmd = {\r\n                command: data.command,\r\n                args: data.args,\r\n                resolve: resolve,\r\n                reject: reject,\r\n                session: self.parent.getSessionById(data.sessionId),\r\n                callback: function() {\r\n                  var args = self.parent.util.fixArgsForApply(arguments);\r\n                  response.data = args;\r\n                  if (args[0] !== undefined) {\r\n                    response.error = args[0] || args[1];\r\n                  }\r\n                  self.parent.emit(\"server_command_executed\", response);\r\n                  self.parent._send(\"vantage-command-downstream\", \"downstream\", response);\r\n                }\r\n              };\r\n              self.parent._exec(cmd);\r\n            });\r\n          };\r\n          self.parent.emit(\"server_command_received\", {\r\n            command: data.command\r\n          });\r\n\r\n          try {\r\n            execute().then(function() {\r\n              response.data = arguments;\r\n              self.parent.emit(\"server_command_executed\", response);\r\n              self.parent._send(\"vantage-command-downstream\", \"downstream\", response);\r\n            }).catch(function(error){\r\n              response.error = error;\r\n              response.data = void 0;\r\n              self.parent.emit(\"server_command_error\", response);\r\n              self.parent._send(\"vantage-command-downstream\", \"downstream\", response);\r\n            });\r\n          } catch(e) {\r\n            console.log(\"Error executing remote command: \", e);\r\n          }\r\n        }\r\n      });\r\n    });\r\n\r\n    on(\"vantage-heartbeat-upstream\", function(data) {\r\n      self.parent._proxy(\"vantage-heartbeat-upstream\", \"upstream\", data).then(function() {\r\n        self.parent._send(\"vantage-heartbeat-downstream\", \"downstream\", {\r\n          delimiter: self.parent._delimiter,\r\n          sessionId: ssn.id\r\n        });\r\n      });\r\n    });\r\n\r\n    on(\"vantage-close-upstream\", function(data) {\r\n      self.parent._proxy(\"vantage-close-upstream\", \"upstream\", data).then(function() {\r\n        self.parent._send(\"vantage-close-downstream\", \"downstream\", { sessionId: ssn.id });\r\n      });\r\n    });\r\n\r\n    on(\"vantage-prompt-upstream\", function(data) {\r\n      self.parent._proxy(\"vantage-prompt-upstream\", \"upstream\", data).then(function() {\r\n        self.parent.emit(\"vantage-prompt-upstream\", data);\r\n      });\r\n    });\r\n\r\n    on(\"vantage-auth-upstream\", function(data) {\r\n      self.parent._proxy(\"vantage-auth-upstream\", \"upstream\", data).then(function() {\r\n        self.parent._authenticate(data, function(err, authenticated) {\r\n          self.parent._send(\"vantage-auth-downstream\", \"downstream\", { sessionId: ssn.id, error: err, authenticated: authenticated });\r\n        });\r\n      });\r\n    });\r\n\r\n    ssn.server.on(\"disconnect\", function(data) {\r\n\r\n      self.parent.emit(\"server_disconnect\", data);\r\n\r\n      var nw = [];\r\n      for (var i = 0; i < self.sessions.length; ++i) {\r\n        if (self.sessions[i].id === ssn.id) {\r\n          //\r\n          if (self.sessions[i].client !== undefined) {\r\n            self.sessions[i].client.close();\r\n          }\r\n          delete self.sessions[i];\r\n        } else {\r\n          nw.push(self.sessions[i]);\r\n        }\r\n      }\r\n      self.sessions = nw;\r\n    });\r\n\r\n    if (self.parent._banner) {\r\n      self.parent._send(\"vantage-banner-downstream\", \"downstream\", { banner: self.parent._banner, sessionId: ssn.id });\r\n    }\r\n\r\n    self.parent._send(\"vantage-heartbeat-downstream\", \"downstream\", { delimiter: self.parent._delimiter, sessionId: ssn.id });\r\n\r\n    self.parent.emit(\"server_connection\", socket);\r\n    cb(socket);\r\n  });\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Unhooks stdout capture.\r\n *\r\n * @return {VantageServer}\r\n * @api public\r\n */\r\n\r\nvantageServer.unhook = function() {\r\n  if (this._hooked && this._unhook !== undefined && this.sessions.length < 1) {\r\n    this._unhook();\r\n    this._hooked = false;\r\n  }\r\n  return this;\r\n};\r\n\r\n/**\r\n * Imports an authentication middleware\r\n * module to replace the server's auth\r\n * function, which is called when a remote\r\n * instance of vantage connects.\r\n *\r\n * @param {Function} middleware\r\n * @param {Object} options\r\n * @return {Vantage}\r\n * @api public\r\n */\r\n\r\nvantageServer.auth = function(middleware, options) {\r\n  middleware = (middleware === \"basic\") ? basicAuth\r\n    : middleware\r\n    ;\r\n\r\n  if (!middleware) {\r\n    this.parent._authFn = void 0;\r\n  } else if (!_.isFunction(middleware)) {\r\n    this.parent._authFn = void 0;\r\n    throw new Error(\"Invalid middleware string passed into Vantage.auth: \" + middleware);\r\n  } else {\r\n    var fn = middleware.call(this.parent, this, options);\r\n    this._authFn = fn;\r\n  }\r\n};\r\n\r\n/**\r\n * Hooks all stdout through a given function.\r\n *\r\n * @param {Function} fn\r\n * @return {VantageServer}\r\n * @api public\r\n */\r\n\r\nvantageServer.hook = function(fn) {\r\n  if (this._hooked && this._unhook !== undefined) {\r\n    this.unhook();\r\n  }\r\n  this._unhook = intercept(fn);\r\n  this._hooked = true;\r\n  return this;\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-vantage/node_modules/vantage/lib/intercept.js":"\"use strict\";\n\n/**\n * Module dependencies.\n */\n\nvar _\t= require(\"lodash\");\n\n/**\n * Intercepts stdout, passes thru callback\n * also pass console.error thru stdout so it goes to callback too\n * (stdout.write and stderr.write are both refs to the same stream.write function)\n * returns an unhook() function, call when done intercepting\n *\n * @param {Function} callback\n * @return {Function}\n */\n\nmodule.exports = function (callback) {\n\n\tvar oldStdoutWrite = process.stdout.write,\n\toldConsoleError = console.error;\n\n\tprocess.stdout.write = (function(write) {\n\t\treturn function(string) {\n\t\t\tvar args = _.toArray(arguments);\n\t\t\targs[0] = interceptor( string );\n\t\t\twrite.apply(process.stdout, args);\n\t\t};\n\t}(process.stdout.write));\n\n\tconsole.error = (function() {\n\t\treturn function() {\n\t\t\tvar args = _.toArray(arguments);\n\t\t\targs.unshift(\"\\x1b[31m[ERROR]\\x1b[0m\");\n\t\t\tconsole.log.apply(console.log, args);\n\t\t};\n\t}(console.error));\n\n\tfunction interceptor(string) {\n\t\t// only intercept the string\n\t\tvar result = callback(string);\n\t\tif (typeof result === \"string\") {\n\t\t\tstring = result.replace( /\\n$/, \"\" ) + (result && (/\\n$/).test( string ) ? \"\\n\" : \"\");\n\t\t}\n\t\treturn string;\n\t}\n\n\t// puts back to original\n\treturn function unhook() {\n\t\tprocess.stdout.write = oldStdoutWrite;\n\t\tconsole.error = oldConsoleError;\n\t};\n\n};\n","/home/travis/build/npmtest/node-npmtest-vantage/node_modules/vantage/lib/firewall.js":"\"use strict\";\r\n\r\n/**\r\n * Module dependencies.\r\n */\r\n\r\nvar _ = require(\"lodash\")\r\n  , inSubnet = require(\"insubnet\")\r\n  ;\r\n\r\n/**\r\n * Firewall prototype.\r\n */\r\n\r\nvar firewall = Firewall.prototype;\r\n\r\n/**\r\n * Expose `Vantage`.\r\n */\r\n\r\nmodule.exports = exports = Firewall;\r\n\r\n/**\r\n * Initialize a new `Firewall` instance.\r\n *\r\n * @return {Firewall}\r\n * @api public\r\n */\r\n\r\nfunction Firewall() {\r\n  this._rules = [];\r\n  this._policy = \"ACCEPT\";\r\n  return this;\r\n}\r\n\r\n/**\r\n * Adds an accept rule.\r\n *\r\n * @param {String} address\r\n * @param {Integer} mask\r\n * @return {Firewall}\r\n * @api public\r\n */\r\n\r\nfirewall.accept = function(address, mask) {\r\n  return this._rule(address, mask, \"ACCEPT\");\r\n};\r\n\r\n/**\r\n * Adds a reject rule.\r\n *\r\n * @param {String} address\r\n * @param {Integer} mask\r\n * @return {Firewall}\r\n * @api public\r\n */\r\n\r\nfirewall.reject = function(address, mask) {\r\n  return this._rule(address, mask, \"REJECT\");\r\n};\r\n\r\n/**\r\n * Adds a rule.\r\n *\r\n * @param {String} address\r\n * @param {Integer} mask\r\n * @return {Firewall}\r\n * @api private\r\n */\r\n\r\nfirewall._rule = function(address, mask, rule) {\r\n\r\n  var parts = String(address).split(\"/\");\r\n  var subnet = mask || ((parts.length === 2) ? parts[1] : void 0);\r\n  var ip = (parts.length === 2) ? parts[0] : address;\r\n\r\n  subnet = (subnet === undefined) ? 32 : subnet;\r\n\r\n  var valid =\r\n    (!this._isValidIp(ip)) ? \"Invalid IP Address passed: \" + ip :\r\n    (isNaN(subnet)) ? \"Invalid subnet mask passed: \" + subnet :\r\n    (subnet > 32) ? \"Subnet mask cannot be greater than 32: \" + subnet :\r\n    (subnet < 0) ? \"Subnet mask cannot be less than 0: \" + subnet :\r\n    true;\r\n\r\n  if (valid !== true) {\r\n    throw new Error(valid);\r\n  }\r\n\r\n  this._rules.push({\r\n    ip: ip,\r\n    subnet: parseFloat(subnet),\r\n    rule: rule\r\n  });\r\n\r\n  return this;\r\n\r\n};\r\n\r\n/**\r\n * Getter for firewall._rules.\r\n *\r\n * @return {Array}\r\n * @api public\r\n */\r\n\r\nfirewall.rules = function() {\r\n  return this._rules;\r\n};\r\n\r\n/**\r\n * Runs address against policy and\r\n * rules, returns a bool determining\r\n * whether or not the IP is authorized.\r\n *\r\n * @param {String} ip\r\n * @return {Boolean}\r\n * @api public\r\n */\r\n\r\nfirewall.valid = function(ip) {\r\n\r\n  var valid;\r\n\r\n  var toIPv4 = function(addr) {\r\n    var parts = String(addr).split(\":\");\r\n    return parts[parts.length - 1];\r\n  };\r\n\r\n  var addr =\r\n    (_.isString(ip)) ? ip :\r\n    (_.isObject(ip) && ip.family === \"IPv6\") ? toIPv4(ip.address) :\r\n    (_.isObject(ip)) ? ip.address : void 0;\r\n\r\n  if (!this._isValidIp(addr)) {\r\n    throw Error(\"Invalid IP Address passed to Firewall.prototype._process: \" + addr);\r\n  }\r\n\r\n  var matches = [];\r\n  for (var i = 0; i < this._rules.length; ++i) {\r\n    var match = (inSubnet.Auto(addr, this._rules[i].ip, this._rules[i].subnet));\r\n    if (match) {\r\n      matches.push(this._rules[i]);\r\n    }\r\n  }\r\n\r\n  if (matches.length === 0) {\r\n    valid = (this._policy === \"ACCEPT\") ? true : false;\r\n    return valid;\r\n  }\r\n\r\n  var pick = matches[0];\r\n  valid = (pick.rule === \"ACCEPT\") ? true : false;\r\n  return valid;\r\n};\r\n\r\n/**\r\n * Setter / Getter for the firewall's policy.\r\n *\r\n * @param {String} policy\r\n * @return {Firewall}\r\n * @api public\r\n */\r\n\r\nfirewall.policy = function(policy) {\r\n\r\n  if (policy === undefined) { return this._policy; }\r\n\r\n  policy = String(policy).toUpperCase();\r\n  policy = (policy === \"ALLOW\") ? \"ACCEPT\" : policy;\r\n  policy = (policy === \"BLOCK\") ? \"REJECT\" : policy;\r\n  policy = (policy === \"DENY\") ? \"REJECT\" : policy;\r\n\r\n  if ([\"ACCEPT\", \"REJECT\"].indexOf(policy) === -1) {\r\n    throw Error(\"Invalid firewall policy passed: \" + policy);\r\n  }\r\n\r\n  this._policy = policy;\r\n  return this;\r\n};\r\n\r\n/**\r\n * Resets all firewall settings to default.\r\n *\r\n * @return {Firewall}\r\n * @api public\r\n */\r\n\r\nfirewall.reset = function() {\r\n  this._rules = [];\r\n  this._policy = \"ACCEPT\";\r\n  return this;\r\n};\r\n\r\n/**\r\n * Validates IP address.\r\n *\r\n * @param {String} ip\r\n * @return {Boolean}\r\n * @api private\r\n */\r\n\r\nfirewall._isValidIp = function(ip) {\r\n  return ((/^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(ip)));\r\n};\r\n\r\n/**\r\n * Failover for forgetful bears.\r\n */\r\n\r\nfirewall.allow = Firewall.prototype.accept;\r\nfirewall.deny = Firewall.prototype.reject;\r\nfirewall.block = Firewall.prototype.reject;\r\n","/home/travis/build/npmtest/node-npmtest-vantage/node_modules/vantage-auth-basic/lib/vantage-auth-basic.js":"\"use strict\";\r\n\r\n/**\r\n * Module dependencies.\r\n */\r\n\r\nvar _ = require(\"lodash\")\r\n  , chalk = require(\"chalk\")\r\n  ;\r\n\r\nmodule.exports = function(vantage, options) {\r\n\r\n  var users\r\n    , connections = {}\r\n    ;\r\n\r\n  options = _.defaults((options || {}), {\r\n    users: [],\r\n    deny: void 0,\r\n    unlockTime: void 0\r\n  });\r\n\r\n  if (options.users.length < 1) {\r\n    throw new Error(\"Vantage basic authentication cannot be called without passing in at least one user into the options parameter.\");\r\n  }\r\n\r\n  users = options.users.map(function(cred){\r\n    var user = cred.user || cred.username\r\n      , pass = cred.pass || cred.password || cred.secret\r\n      ;\r\n    if (!user) {\r\n      throw new Error(\"Vantage basic authentication: no 'user' string was passed in a submitted user: \" + JSON.stringify(cred));\r\n    }\r\n    if (!pass) {\r\n      throw new Error(\"Vantage basic authentication: no 'pass' string was passed in a submitted user: \" + JSON.stringify(cred));\r\n    }\r\n    return ({\r\n      user: user,\r\n      pass: pass\r\n    });\r\n  });\r\n\r\n  var strategy = function(args, callback) {\r\n\r\n    var self = this\r\n      , deny = (options.deny === 0) ? 0 : (options.deny || 3)\r\n      , unlockTime = (options.unlockTime || 30000)\r\n      , retry = (options.retry === 0) ? 0 : (options.retry || 3)\r\n      , retryTime = (options.retryTime || 1000)\r\n      , handshake = (args.handshake)\r\n      , host = ((handshake) ? handshake.host : void 0)\r\n      , port = ((handshake) ? handshake.port : void 0)\r\n      , id = host + \":\" + port\r\n      , questions = [{\r\n          type: \"input\",\r\n          name: \"answer\",\r\n          message: chalk.white(\"login as:\")\r\n        }, {\r\n          type: \"password\",\r\n          name: \"answer\",\r\n          message: chalk.white(\"password:\")\r\n        }]\r\n      , state = {\r\n          user: args.user || void 0,\r\n          pass: args.pass || void 0\r\n        }\r\n      ;\r\n\r\n    connections[id] = connections[id] || {\r\n      attempts: 0,\r\n      deny: 0\r\n    };\r\n\r\n    if (!handshake) {\r\n      callback(\"Access denied: no connection handshake.\", false);\r\n      return;\r\n    }\r\n\r\n    if (!host) {\r\n      callback(\"Access denied: no host specified in connection handshake.\", false);\r\n      return;\r\n    }\r\n\r\n    // Check if submitted user matches anything.\r\n    function search(user, pass, userArray) {\r\n      return _.findWhere(userArray, { user: user, pass: pass });\r\n    }\r\n\r\n    // If a value is given, skip, otherwise\r\n    // prompt user for data.\r\n    function ask(question, cbk, skip) {\r\n      if (skip) {\r\n        cbk(skip);\r\n        return;\r\n      }\r\n      self.prompt(question, function(answ) {\r\n        if (String(answ.answer).trim() === \"\") {\r\n          return ask(question, cbk);\r\n        } else {\r\n          cbk(answ.answer);\r\n        }\r\n      });\r\n    }\r\n\r\n    // Ask for a user and password.\r\n    // If a user is passed in, just ask for\r\n    // a password and skip the user.\r\n    function gather(cbk) {\r\n      ask(questions[0], function(user) {\r\n        state.user = user;\r\n        ask(questions[1], function(pass){\r\n          state.pass = pass;\r\n          cbk(state.user, state.pass);\r\n        }, state.pass);\r\n      }, state.user);\r\n    }\r\n\r\n    // Authentication attempt logic,\r\n    // including adding up retry and\r\n    // deny counts, etc.\r\n    function attempt() {\r\n      connections[id].attempts++;\r\n      if (connections[id].attempts > retry) {\r\n        connections[id].attempts = 0;\r\n        connections[id].deny++;\r\n        self.log(chalk.yellow(\"Access denied: too many attempts.\"));\r\n        callback(\"Access denied: too many attempts.\", false);\r\n        return;\r\n      }\r\n      if (connections[id].deny >= deny && unlockTime > 0) {\r\n        setTimeout(function(){\r\n          connections[id].deny = 0;\r\n        }, unlockTime);\r\n        connections[id].attempts = 0;\r\n        self.log(chalk.yellow(\"Account locked out: too many login attempts.\"));\r\n        callback(\"Account locked out: too many login attempts.\", false);\r\n        return;\r\n      }\r\n      gather(function(user, pass){\r\n        user = search(user, pass, users);\r\n        if (user) {\r\n          connections[id].attempts = 0;\r\n          connections[id].deny = 0;\r\n          callback(\"Successfully Authenticated.\", true);\r\n        } else {\r\n          state.pass = void 0;\r\n          setTimeout(function(){\r\n            if (connections[id].attempts <= retry) {\r\n              self.log(\"Access denied.\");\r\n            }\r\n            attempt();\r\n          }, retryTime);\r\n        }\r\n      });\r\n    }\r\n\r\n    attempt();\r\n\r\n  };\r\n\r\n  return strategy;\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-vantage/node_modules/vantage/lib/client.js":"\"use strict\";\r\n\r\n/**\r\n * Module dependencies.\r\n */\r\n\r\nvar _ = require(\"lodash\")\r\n  , util = require(\"util\")\r\n  , chalk = require(\"chalk\")\r\n  ; require(\"native-promise-only\")\r\n  ;\r\n\r\n/**\r\n * Initialize a new `VantageClient` instance.\r\n *\r\n * @param {Vantage} parent\r\n * @return {VantageClient}\r\n * @api public\r\n */\r\n\r\nfunction VantageClient(parent) {\r\n  this.parent = parent;\r\n  // Sessions are created when you use\r\n  // vantage as a client to connect to\r\n  // other instances of vantage.\r\n  this.sessions = [];\r\n\r\n  return this;\r\n}\r\n\r\n/**\r\n * VantageClient prototype.\r\n */\r\n\r\nvar vantageClient = VantageClient.prototype;\r\n\r\n/**\r\n * Expose `VantageClient`.\r\n */\r\n\r\nexports = module.exports = VantageClient;\r\n\r\n/**\r\n * Connects to another listening vantage server.\r\n *\r\n * @param {String} server\r\n * @param {Integer} port\r\n * @param {Object} options\r\n * @param {Function} cb\r\n * @return {Promise}\r\n * @api public\r\n */\r\n\r\nvantageClient.connect = function(server, port, options, cb) {\r\n  var self = this;\r\n\r\n  return new Promise(function(resolve, reject) {\r\n\r\n    // Callback can be passed in the options parameter, if\r\n    // no options are needed.\r\n    cb = (_.isFunction(options)) ? options : (cb || function(){});\r\n    options = (!options || _.isFunction(options)) ? {} : options;\r\n    options = _.defaults(options, {\r\n      ssl: false,\r\n      user: void 0,\r\n      pass: void 0,\r\n      pipe: false,\r\n      sessionId: self.parent.session.id\r\n    });\r\n\r\n    var method = (options.ssl) ? \"https\" : \"http\";\r\n\r\n    var ssn = self.parent.getSessionById(options.sessionId);\r\n\r\n    ssn.log(\"Connecting to \" + server + \":\" + port + \" using \" + method + \"...\");\r\n\r\n    if (!ssn) {\r\n      throw new Error(\"vantageClient.connect was called with an invalid Session ID: \" + options.sessionId);\r\n    }\r\n\r\n    ssn.client = require(\"socket.io-client\")(method + \"://\" + server + \":\" + port, {\r\n      \"force new connection\": true,\r\n      \"forceNew\": true,\r\n      \"secure\": true,\r\n      \"query\": \"id=\" + self.parent.session.id + \"&sessionId=\" + options.sessionId,\r\n      \"reconnection\": true,\r\n      \"reconnectionDelay\": 1000,\r\n      \"reconnectionAttempts\": 1\r\n    });\r\n\r\n    ssn.client.on(\"connect\", function() {\r\n\r\n      if (!ssn.client) { return; }\r\n      self.parent.emit(\"client_connect\", this);\r\n\r\n      ssn.client.on(\"vantage-banner-downstream\", function(data) {\r\n        self.parent._proxy(\"vantage-banner-downstream\", \"downstream\", data).then(function(){\r\n          if (data.banner) {\r\n            ssn.log(data.banner);\r\n          }\r\n        });\r\n      });\r\n\r\n      ssn.client.on(\"vantage-keypress-downstream\", function(data) {\r\n        self.parent._proxy(\"vantage-keypress-downstream\", \"downstream\", data).then(function(){\r\n          if (data.value !== undefined) {\r\n            if (_.isArray(data.value)) {\r\n              self.parent.ui.imprint();\r\n              ssn.log(data.value);\r\n            } else {\r\n              self.parent.ui.redraw(data.value);\r\n            }\r\n          }\r\n        });\r\n      });\r\n\r\n      // Command completion.\r\n      ssn.client.on(\"vantage-command-downstream\", function(data) {\r\n        self.parent._proxy(\"vantage-command-downstream\", \"downstream\", data).then(function(){\r\n          if (data.completed === true) {\r\n            data.data = self.parent.util.fixArgsForApply(data.data);\r\n            if (self.parent._command) {\r\n              if (self.parent._command.command !== data.command) {\r\n                console.log(\"Downstream command does not match stored comand: \", data.command, \" -vs -\", self.parent._command.command);\r\n              }\r\n              var name = self.parent._command.command;\r\n              var res = self.parent._command.resolve;\r\n              var rej = self.parent._command.reject;\r\n              var cbk = self.parent._command.callback;\r\n              delete self.parent._command;\r\n              self.parent._command = void 0;\r\n              try {\r\n                self.parent._queueHandler.call(self.parent);\r\n              } catch(e) {\r\n                console.log(\"Error on vantage command downstream: \", e.stack);\r\n              }\r\n\r\n              if (cbk !== undefined) {\r\n                self.parent.emit(\"client_command_executed\", { command: name });\r\n                cbk.apply(null, data.data);\r\n              } else if (data.error !== undefined && rej !== undefined) {\r\n                self.parent.emit(\"client_command_error\", { command: name, error: data.error });\r\n                try {\r\n                  rej(data.error);\r\n                } catch(e) {\r\n                  console.log(\"Error calling Promise reject on vantage command downstream: \", e);\r\n                }\r\n              } else if (res !== undefined) {\r\n                self.parent.emit(\"client_command_executed\", { command: name });\r\n                if (data.error === undefined && _.isArray(data.data) && data.data.length === 2) {\r\n                  data.data.shift();\r\n                }\r\n                try {\r\n                  res.apply(null, data.data);\r\n                } catch(e) {\r\n                  console.log(\"Error calling Promise resolve on vantage command downstream: \", e);\r\n                }\r\n              }\r\n            }\r\n            if (!self.parent.ui.midPrompt()) {\r\n              self.parent._prompt({ sessionId: data.sessionId });\r\n            }\r\n          } else {\r\n            console.log(\"Vantage command downstream was called with no completed boolean.\");\r\n            console.trace();\r\n          }\r\n        });\r\n      });\r\n\r\n      ssn.client.on(\"vantage-stdout-downstream\", function(data) {\r\n        self.parent._proxy(\"vantage-stdout-downstream\", \"downstream\", data).then(function(){\r\n          var stdout = data.value || \"\";\r\n          stdout =\r\n            (_.isString(stdout) && (util.inspect(stdout.slice(stdout.length - 2, stdout.length).trim() === \"\\n\")))\r\n            ? stdout.slice(0, stdout.length - 1)\r\n            : stdout;\r\n          ssn.log(stdout);\r\n        });\r\n      });\r\n\r\n      ssn.client.on(\"vantage-heartbeat-downstream\", function(data){\r\n        self.parent._proxy(\"vantage-heartbeat-downstream\", \"downstream\", data).then(function(){\r\n          if (data.delimiter) {\r\n            ssn.delimiter(data.delimiter);\r\n          }\r\n          self.parent.emit(\"vantage-heartbeat-downstream\");\r\n        });\r\n      });\r\n\r\n      ssn.client.on(\"vantage-mode-delimiter-downstream\", function(data){\r\n        self.parent._proxy(\"vantage-mode-delimiter-downstream\", \"downstream\", data).then(function(){\r\n          if (typeof data.value !== \"undefined\") {\r\n            ssn.modeDelimiter(data.value);\r\n            self.parent.emit(\"vantage-mode-delimiter-downstream\");\r\n          }\r\n        });\r\n      });\r\n\r\n      ssn.client.on(\"vantage-delimiter-downstream\", function(data){\r\n        self.parent._proxy(\"vantage-delimiter-downstream\", \"downstream\", data).then(function(){\r\n          if (data.value) {\r\n            ssn.delimiter(data.value);\r\n            self.parent.emit(\"vantage-delimiter-downstream\");\r\n          }\r\n        });\r\n      });\r\n\r\n      ssn.client.on(\"vantage-prompt-downstream\", function(data) {\r\n        self.parent._proxy(\"vantage-prompt-downstream\", \"downstream\", data).then(function(){\r\n          data = data || {};\r\n          data.options = data.options || {};\r\n          // Set local prompt delimiter to question\r\n          // from upstream prompt command.\r\n          if (self.parent.ui.midPrompt()) {\r\n            self.parent.ui.pause();\r\n          }\r\n          self.parent.ui.setDelimiter(data.options.message || ssn.delimiter);\r\n          self.parent.ui.prompt(data.options, function(result) {\r\n            // Reset local prompt delimiter.\r\n            self.parent.ui.setDelimiter(ssn.delimiter);\r\n            // Pipe prompt response back upstream so command\r\n            // execution can continue.\r\n            self.parent._send(\"vantage-prompt-upstream\", \"upstream\", { value: result, sessionId: data.sessionId });\r\n          });\r\n        });\r\n      });\r\n\r\n      ssn.client.on(\"vantage-close-downstream\", function(data){\r\n        ssn.client.close();\r\n        if (self.parent._command !== undefined) {\r\n          var name = self.parent._command.command;\r\n          var res = self.parent._command.resolve;\r\n          var cbk = self.parent._command.callback;\r\n          delete self.parent._command;\r\n          self.parent._command = void 0;\r\n          self.parent._queueHandler.call(self.parent);\r\n          if (name.indexOf(\"exit\") > -1) {\r\n            if (cbk !== undefined) {\r\n              cbk(void 0, \"Exited successfully.\");\r\n            } else if (res !== undefined) {\r\n              res(\"Exited successfully.\");\r\n            }\r\n            self.parent.emit(\"client_command_executed\", { command: name });\r\n          }\r\n\r\n        } else {\r\n          self.parent._send(\"vantage-command-downstream\", \"downstream\", { completed: true, data: \"Exited successfully.\", sessionId: data.sessionId, command: \"exit\" });\r\n        }\r\n      });\r\n\r\n      ssn.client.on(\"vantage-resume-downstream\", function(data) {\r\n        self.parent._proxy(\"vantage-resume-downstream\", \"downstream\", data).then(function(){\r\n          self.parent._prompt({ sessionId: data.sessionId });\r\n        });\r\n      });\r\n\r\n      ssn.client.on(\"vantage-ssn-stdout-downstream\", function(data) {\r\n        self.parent._proxy(\"vantage-ssn-stdout-downstream\", \"downstream\", data).then(function() {\r\n          var sessn = self.parent.getSessionById(data.sessionId);\r\n          if (sessn) {\r\n            sessn.log.apply(sessn, data.value);\r\n          }\r\n        });\r\n      });\r\n\r\n      if (ssn.isLocal() && self.parent.ui.midPrompt()) {\r\n        self.parent.ui.pause();\r\n      }\r\n\r\n      ssn.client.on(\"vantage-auth-downstream\", function(data){\r\n        data = data || {};\r\n        var error = data.error;\r\n        var authenticated = data.authenticated;\r\n        if (authenticated === true) {\r\n          ssn.user = options.user || \"guest\";\r\n          resolve(void 0);\r\n          cb(void 0);\r\n        } else {\r\n          self.parent._send(\"vantage-close-upstream\", \"upstream\", { sessionId: ssn.id });\r\n          reject(error || authenticated);\r\n          cb(true, error || authenticated);\r\n        }\r\n      });\r\n\r\n      var authData = {\r\n        handshake: (ssn.client.io.opts || {}),\r\n        user: options.user,\r\n        pass: options.pass,\r\n        sessionId: ssn.id\r\n      };\r\n\r\n      self.parent._send(\"vantage-auth-upstream\", \"upstream\", authData);\r\n    });\r\n\r\n    function disconnect(data) {\r\n      self.parent.emit(\"client_disconnect\", data);\r\n      if (ssn.client) {\r\n        ssn.client.close();\r\n      }\r\n      if (!ssn.isLocal()) {\r\n        self.parent._send(\"vantage-heartbeat-downstream\", \"downstream\", {\r\n          delimiter: self.parent._delimiter,\r\n          sessionId: ssn.id\r\n        });\r\n      } else {\r\n        ssn.delimiter(self.parent._delimiter);\r\n        self.parent._prompt({ sessionId: ssn.id });\r\n      }\r\n      delete ssn.client;\r\n      ssn.client = void 0;\r\n    }\r\n\r\n    ssn.client.on(\"connect_error\", function(err) {\r\n      self.parent.emit(\"client_connect_error\", err);\r\n      var sessn = self.parent.getSessionById(options.sessionId);\r\n      var description =\r\n        (_.isObject(err)) ? ((err.description === 503) ? \"503 Service Unavailable\" : err.description)\r\n        : err;\r\n      sessn.log(chalk.yellow(\"Connection Error: \") + description);\r\n      disconnect(err);\r\n      reject(\"Connection Error: \" + description);\r\n      cb(\"Error connecting: \" + description);\r\n    });\r\n\r\n    ssn.client.on(\"error\", function(err){\r\n      self.parent.emit(\"client_error\", err);\r\n      ssn.log(err);\r\n      disconnect(err);\r\n      reject(\"Connection Error: \" + err);\r\n      cb(\"Error connecting: \" + err);\r\n    });\r\n\r\n    ssn.client.on(\"disconnect\", function(data) {\r\n      self.parent.emit(\"client_disconnect\", data);\r\n      // Reset delimiter back.\r\n      if (!ssn.isLocal()) {\r\n        self.parent._send(\"vantage-heartbeat-downstream\", \"downstream\", {\r\n          delimiter: self.parent._delimiter,\r\n          sessionId: ssn.id\r\n        });\r\n      } else {\r\n        ssn.delimiter(self.parent._delimiter);\r\n        self.parent._prompt({ sessionId: ssn.id });\r\n      }\r\n      delete ssn.client;\r\n      ssn.client = void 0;\r\n    });\r\n  });\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-vantage/node_modules/vantage/lib/vantage-commons.js":"\"use strict\";\r\n\r\n/**\r\n * Function library for Vantage\"s out-of-the-box\r\n * API commands. Imported into a Vantage server\r\n * through vantage.use(module).\r\n */\r\n\r\n/**\r\n * Module dependencies.\r\n */\r\n\r\nvar _ = require(\"lodash\")\r\n  , chalk = require(\"chalk\")\r\n  ;\r\n\r\nmodule.exports = function(vantage) {\r\n\r\n  vantage\r\n    .command(\"who\", \"Lists active vantage sessions.\")\r\n    .hidden()\r\n    .action(function(args, cb) {\r\n      var ssns = _.clone(this.parent.server.sessions || []);\r\n      ssns.unshift(this.parent.session);\r\n      var hdr = \"  ID    User                 \";\r\n      this.log(\"\\n\" + hdr);\r\n      for (var i = 0; i < ssns.length; ++i) {\r\n        var ssn = ssns[i];\r\n        var id = ssn.id.slice(ssn.id.length - 4, ssn.id.length);\r\n        var res = \"\"\r\n          + \"  \"\r\n          + id\r\n          + \"  \"\r\n          + vantage.util.pad(ssn.user + \"@\" + (ssn.address || \"local\"), 20)\r\n          + \"\"\r\n          ;\r\n        res = (ssn.id === this.id) ? chalk.white(res) : res;\r\n        this.log(res);\r\n      }\r\n      this.log(\" \");\r\n      cb();\r\n    });\r\n\r\n  /**\r\n   * Connects to another instance of Vantage.\r\n   */\r\n\r\n  vantage\r\n    .command(\"vantage <server>\")\r\n    .alias(\"vtg\")\r\n    .alias(\"nsh\")\r\n    .option(\"-s, --ssl\", \"Connect using SSL.\")\r\n    .option(\"-u, --user [user]\", \"Connect as a given user.\")\r\n    .option(\"-p, --pass [user]\", \"Password for given user.\")\r\n    .description(\"Connects to another instance of Node running Vantage.\")\r\n    .autocompletion(function(text, iteration, cb){\r\n      cb(void 0, \"vantage 127.0.0.1:80\");\r\n    })\r\n    .action(function(args, cb) {\r\n      var self = this;\r\n      var str = (!args.server) ? \"\" : args.server;\r\n      var parts = String(str).split(\":\");\r\n      var port = (parts.length === 2) ? parts[1] : void 0;\r\n      var server = (parts.length === 2) ? parts[0] : void 0;\r\n      if (parts.length === 1) {\r\n        server = (String(parts[0]).split(\".\").length === 4) ? parts[0] : void 0;\r\n        port = (String(parts[0]).length < 6 && !isNaN(parts[0])) ? parts[0] : void 0;\r\n      }\r\n      server = (!server) ? \"127.0.0.1\" : server;\r\n      port = (!port) ? \"80\" : port;\r\n      var options = {\r\n        ssl: (args.options.ssl === true) ? true : false,\r\n        user: (args.options.user) ? args.options.user : void 0,\r\n        pass: (args.options.pass) ? args.options.pass : void 0,\r\n        sessionId: self.id\r\n      };\r\n      this.parent.client.connect(server, port, options, function(err, data) {\r\n        cb(err, data);\r\n      });\r\n    });\r\n    //..after;\r\n\r\n};\r\n\r\n","/home/travis/build/npmtest/node-npmtest-vantage/node_modules/vantage/bin/vantage.js":"#!/usr/bin/env node\n\n\"use strict\";\n\nvar commander = require(\"commander\")\n  , Vantage = require(\"../lib/index\")\n  , chalk = require(\"chalk\")\n  ;\n\nvar command\n  , options = {}\n  ;\n\ncommander\n  .arguments(\"[server]\")\n  .option(\"-s, --ssl\", \"Connect using SSL.\")\n  .option(\"-u, --user [user]\", \"Connect as a given user.\")\n  .option(\"-p, --pass [user]\", \"Password for given user.\")\n  .action(function(cmd, opts) {\n    command = cmd || \"\";\n    opts = opts || {};\n    options.ssl = (opts.ssl) ? true : void 0;\n    options.user = (opts.user) ? opts.user : void 0;\n    options.pass = (opts.pass) ? opts.pass : void 0;\n  });\n\ncommander.parse(process.argv);\n\nfunction parseConnection(str) {\n  var parts = String(str).split(\":\");\n  var port = (parts.length === 2) ? parts[1] : void 0;\n  var server = (parts.length === 2) ? parts[0] : void 0;\n  if (parts.length === 1) {\n    server = (isNumber(parts[0])) ? void 0 : parts[0];\n    port = (String(parts[0]).length < 6 && isNumber(parts[0])) ? parts[0] : void 0;\n  }\n  server = (!server) ? \"127.0.0.1\" : server;\n  port = (!port) ? \"80\" : port;\n  return ({\n    server: server,\n    port: port\n  });\n}\n\nfunction isNumber(str) {\n  return !isNaN(parseInt(str));\n}\n\nfunction connect(vantage, server, port, opt) {\n  return vantage.connect(server, port, opt).then(function(err) {\n    if (err) {\n      vantage._pause();\n      process.exit(1);\n    } else {\n      if (!vantage.ui.midPrompt()) {\n        vantage._prompt();\n      }\n    }\n  }).catch(function(err){\n    if (err.stack) {\n      vantage.log(err.stack);\n    }\n    vantage._pause();\n    process.exit(1);\n  });\n}\n\nfunction showTour() {\n  var fs = require(\"fs\");\n  var path = require(\"path\");\n  var file = \"/../examples/tour/tour.js\";\n  if (fs.existsSync(path.join(__dirname, file))) {\n    require(path.join(__dirname, file)); return;\n  } else {\n    console.log(chalk.yellow(\"\\n  Looks like the tour isn't included in your Vantage instance.\\n  Ensure ./examples/ is in your Vantage directory.\\n\"));\n    process.exit(1);\n  }\n}\n\nfunction execute(cmd, opt) {\n  if (cmd === \"tour\") {\n    return showTour();\n  }\n\n  var vantage = new Vantage();\n  vantage.show();\n\n  var connection = parseConnection(cmd);\n\n  // If there is somewhere to go, connect.\n  if (cmd !== undefined) {\n    connect(vantage, connection.server, connection.port, opt);\n  }\n}\n\nexecute(command, options);\n","/home/travis/build/npmtest/node-npmtest-vantage/node_modules/vantage/lib/logger.js":"/**\r\n * Module dependencies.\r\n */\r\n\r\nvar _ = require(\"lodash\")\r\n  , ut = require(\"util\")\r\n  ;\r\n\r\n/**\r\n * Initialize a new `Logger` instance.\r\n *\r\n * @return {Logger}\r\n * @api public\r\n */\r\n\r\nfunction viewed(str) {\r\n  var re = /\\u001b\\[\\d+m/gm;\r\n  return String(str).replace(re, \"\");\r\n}\r\n\r\nfunction trimTo(str, amt) {\r\n\r\n  var raw = \"\";\r\n  var visual = viewed(str).slice(0, amt);\r\n  var result = \"\";\r\n  for (var i = 0; i < str.length; ++i) {\r\n    raw = raw + str[i];\r\n    if (viewed(raw) === visual) {\r\n      result = raw; break;\r\n    }\r\n  }\r\n\r\n  if (result.length < amt - 10) {\r\n    return result;\r\n  }\r\n\r\n  var newResult = result; var found = false;\r\n  for (var j = result.length; j > 0; --j) {\r\n    if (result[j] === \" \") {\r\n      found = true;\r\n      break;\r\n    } else {\r\n      newResult = newResult.slice(0, newResult.length - 1);\r\n    }\r\n  }\r\n\r\n  if (found === true) {\r\n    return newResult;\r\n  } else {\r\n    return result;\r\n  }\r\n\r\n}\r\n\r\nfunction Logger(cons, vantage) {\r\n\r\n  var logger = cons || console;\r\n\r\n  log = function() {\r\n    logger.log.apply(logger, arguments);\r\n  };\r\n\r\n  log.cols = function() {\r\n\r\n    var width = process.stdout.columns\r\n      , pads = 0\r\n      , padsWidth = 0\r\n      , cols = 0\r\n      , colsWidth = 0\r\n      ;\r\n\r\n    var input = arguments;\r\n\r\n    for (var h = 0; h < arguments.length; ++h) {\r\n      if (typeof arguments[h] === \"number\") {\r\n        padsWidth = padsWidth + arguments[h];\r\n        pads++;\r\n      }\r\n      if (_.isArray(arguments[h]) && typeof arguments[h][0] === \"number\") {\r\n        padsWidth = padsWidth + arguments[h][0];\r\n        pads++;\r\n      }\r\n    }\r\n\r\n    cols = arguments.length - pads;\r\n    colsWidth = Math.floor((width - padsWidth) / cols);\r\n\r\n    var lines = [];\r\n\r\n    var go = function() {\r\n      var str = \"\", done = true;\r\n      for (var i = 0; i < input.length; ++i) {\r\n\r\n        if (typeof input[i] === \"number\") {\r\n          str = str + vantage.util.pad(\"\", input[i], \" \");\r\n        } else if (_.isArray(input[i]) && typeof input[i][0] === \"number\") {\r\n          str = str + vantage.util.pad(\"\", input[i][0], input[i][1]);\r\n        } else {\r\n\r\n          var chosenWidth = colsWidth + 0;\r\n\r\n          var trimmed = trimTo(input[i], colsWidth);\r\n          var trimmedLength = trimmed.length;\r\n\r\n          var re = /\\\\u001b\\[\\d+m/gm;\r\n          var matches = ut.inspect(trimmed).match(re);\r\n          var color = \"\";\r\n\r\n          // Ugh. We're chopping a line, so we have to look for unfinished\r\n          // color assignments and throw them on the next line.\r\n          if (matches && matches[matches.length - 1] !== \"\\\\u001b[39m\") {\r\n            trimmed = trimmed + \"\\u001b[39m\";\r\n            var number = String(matches[matches.length - 1]).slice(7, 9);\r\n            color = \"\\x1B[\" + number + \"m\";\r\n          }\r\n\r\n          input[i] = color + String(input[i].slice(trimmedLength, input[i].length)).trim();\r\n          str = str + vantage.util.pad(String(trimmed).trim(), chosenWidth, \" \");\r\n          if (viewed(input[i]).trim() !== \"\") { done = false; }\r\n        }\r\n      }\r\n      lines.push(str);\r\n      if (!done) {\r\n        go();\r\n      }\r\n    };\r\n    go();\r\n\r\n    for (var i = 0; i < lines.length; ++i) {\r\n      logger.log(lines[i]);\r\n    }\r\n    return this;\r\n  };\r\n\r\n  log.br = function() {\r\n    logger.log(\" \");\r\n    return this;\r\n  };\r\n\r\n  return this.log;\r\n}\r\n\r\n/**\r\n * Expose `logger`.\r\n */\r\n\r\nmodule.exports = exports = Logger;\r\n"}